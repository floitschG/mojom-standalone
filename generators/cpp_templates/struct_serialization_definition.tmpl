{%- import "struct_macros.tmpl" as struct_macros %}

size_t {{struct.name}}::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool {{struct.name}}::Serialize(void* buf,
                                size_t buf_size) {
  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::{{struct.name}}_Data* output_ptr;
  if (Serialize_(this, &overlay_buf, &output_ptr) !=
      mojo::internal::VALIDATION_ERROR_NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);

  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  return true;
}

void {{struct.name}}::Deserialize(void* buf) {
  internal::{{struct.name}}_Data* input =
      static_cast<internal::{{struct.name}}_Data*>(buf);

  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialize() does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const {{struct.name}}& input) {
  {{struct_macros.get_serialized_size(struct, "input.%s")}}
  return size;
}

mojo::internal::ValidationError Serialize_(
    {{struct.name}}* input,
    mojo::internal::Buffer* buf,
    internal::{{struct.name}}_Data** output) {
  if (input) {
    {{struct_macros.serialize(struct, struct.name ~ " struct", "input->%s", "result", "buf", true)|indent(2)}}
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::VALIDATION_ERROR_NONE;
}

void Deserialize_(internal::{{struct.name}}_Data* input,
                  {{struct.name}}* result) {
  if (input) {
    {{struct_macros.deserialize(struct, "input", "result->%s")|indent(2)}}
  }
}
