{#- TODO(vardhan): This template produces crazy amounts of whitespace. Clean
this stuff up (it involves digging through all the templates included here. -#}
// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{%- import "struct_macros.tmpl" as struct_macros %}
{%  import "interface_macros.tmpl" as interface_macros -%}
{%- set header_guard = "%s_H_"|
        format(module.path|upper|replace("/","_")|replace(".","_")) %}

#ifndef {{header_guard}}
#define {{header_guard}}

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "{{module.path}}-internal.h"
{%- for import in imports %}
#include "{{import.module.path}}.h"
{%- endfor %}

{#------------------------ #}
{#--- Forward Declarations #}
{#------------------------ #}

{%- for namespace in namespaces_as_array %}
namespace {{namespace}} {
{%- endfor %}

{#--- Interface Forward Declarations -#}
{%  for interface in interfaces %}
class {{interface.name}};
using {{interface.name}}Ptr = mojo::InterfacePtr<{{interface.name}}>;
{%  endfor %}

{#--- Struct Forward Declarations -#}
{%  for struct in structs %}
{{ struct_macros.structptr_forward_decl(struct) }}
{%  endfor %}

{#--- Union Forward Declarations -#}
{%  for union in unions %}
class {{union.name}};
{%    if union|should_inline_union %}
typedef mojo::InlinedStructPtr<{{union.name}}> {{union.name}}Ptr;
{%    else %}
typedef mojo::StructPtr<{{union.name}}> {{union.name}}Ptr;
{%    endif %}
{%- endfor %}

{%- for namespace in namespaces_as_array|reverse %}
}  // namespace {{namespace}}
{%- endfor %}

{#------------------------------------- #}
{#--- Internal Template Specializations #}
{#------------------------------------- #}

namespace mojo {
namespace internal {

{%- for struct in structs %}
{%    set namespace = namespaces_as_array|join("::") %}
{%    set struct_name = struct|get_name_for_kind %}
template <>
struct WrapperTraits<{{namespace}}::{{struct_name}}Ptr, true, false> {
  using DataType = {{namespace}}::internal::{{struct_name}}_Data*;
};
{%- endfor %}

}  // internal
}  // mojo

{#---------------- #}
{#--- Declarations #}
{#---------------- #}

{%- for namespace in namespaces_as_array %}
namespace {{namespace}} {
{%- endfor %}

{#--- Enums #}
{% from "enum_macros.tmpl" import enum_decl -%}
{% from "enum_macros.tmpl" import global_enum_operators_decl -%}
{%  for enum in enums %}
  {{enum_decl(enum)}}
  {{global_enum_operators_decl(enum)}}
{%- endfor %}

{#--- Constants #}
{%- for constant in module.constants %}
{#-   To be consistent with constants defined inside interfaces, only make
      integral types compile-time constants. #}
{%-   if constant.kind|is_integral_kind %}
const {{constant.kind|cpp_pod_type}} {{constant.name}} = {{constant|constant_value}};
{%-   else %}
extern const {{constant.kind|cpp_pod_type}} {{constant.name}};
{%-   endif %}
{%- endfor %}

{#--- Interfaces -#}
{%  for interface in interfaces %}
{%    include "interface_declaration.tmpl" %}
{%- endfor %}

{#--- Interface Proxies -#}
{%  for interface in interfaces %}
{%    include "interface_proxy_declaration.tmpl" %}
{%- endfor %}

{#--- Interface Stubs -#}
{%  for interface in interfaces %}
{%    include "interface_stub_declaration.tmpl" %}
{%- endfor %}

{#--- Interface Request Validators -#}
{%  for interface in interfaces %}
{%    include "interface_request_validator_declaration.tmpl" %}
{%- endfor %}

{#--- Interface Response Validators -#}
{%  for interface in interfaces if interface|has_callbacks %}
{%    include "interface_response_validator_declaration.tmpl" %}
{%- endfor %}

{#--- Unions must be declared first because they can be members of structs #}
{#--- Unions #}
{%  for union in unions %}
{%    include "wrapper_union_class_declaration.tmpl" %}
{%- endfor %}

{#--- NOTE: Non-inlined structs may have pointers to inlined structs, so we  #}
{#---       need to fully define inlined structs ahead of the others.        #}

{#--- Inlined structs #}
{%  for struct in structs %}
{%    if struct|should_inline %}
{%      include "wrapper_class_declaration.tmpl" %}
{%    endif %}
{%- endfor %}

{#--- Non-inlined structs #}
{%  for struct in structs %}
{%    if not struct|should_inline %}
{%      include "wrapper_class_declaration.tmpl" %}
{%    endif %}
{%- endfor %}

{#--- Struct Serialization Helpers -#}
{%  if structs %}
{%    for struct in structs %}
{%      include "struct_serialization_declaration.tmpl" %}
{%-   endfor %}
{%- endif %}

{#--- Union Serialization Helpers -#}
{%  if unions %}
{%    for union in unions %}
{%      include "union_serialization_declaration.tmpl" %}
{%-   endfor %}
{%- endif %}

{#--- Request and response parameter structs for Interface methods -#}
{%  for interface in interfaces -%}
      {{interface_macros.declare_param_structs_for_interface(interface)}}
{%- endfor %}

{%- for namespace in namespaces_as_array|reverse %}
}  // namespace {{namespace}}
{%- endfor %}

#endif  // {{header_guard}}
